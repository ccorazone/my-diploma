import SwiftUI
import Firebase

struct EmployeeEditView: View {
    var employee: AppUser

    @State private var selectedSpecialty: String
    @State private var customSpecialty: String = ""
    @Environment(\.presentationMode) var presentationMode

    // üîπ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    let specialties = [
        "–ö—É—Ö–Ω—è": ["–ü–æ–≤–∞—Ä", "–®–µ—Ñ-–ø–æ–≤–∞—Ä", "–°—É-—à–µ—Ñ", "–ü–µ–∫–∞—Ä—å", "–ö–æ–Ω–¥–∏—Ç–µ—Ä", "–ö—É—Ö–æ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫", "–ü–æ—Å—É–¥–æ–º–æ–π—â–∏–∫"],
        "–ó–∞–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞": ["–û—Ñ–∏—Ü–∏–∞–Ω—Ç", "–ë–∞—Ä–º–µ–Ω", "–•–æ—Å—Ç–µ—Å", "–†–∞–Ω–Ω–µ—Ä", "–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–∞"],
        "–û—Ç–µ–ª—å": ["–ì–æ—Ä–Ω–∏—á–Ω–∞—è", "–†–µ—Å–µ–ø—à–µ–Ω", "–ë–µ–ª–ª–±–æ–π", "–û—Ö—Ä–∞–Ω–Ω–∏–∫", "–ö–ª–∏–Ω–µ—Ä"],
        "–ú–∞–≥–∞–∑–∏–Ω": ["–ö–∞—Å—Å–∏—Ä", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–ú–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä", "–∑–∞–≤–µ–¥—É—é—â–∏–π –æ—Ç–¥–µ–ª–æ–º –º–∞–≥–∞–∑–∏–Ω–∞"],
        "–ö–æ—Ñ–µ–π–Ω—è": ["–ë–∞—Ä–∏—Å—Ç–∞", "–ö–æ–Ω–¥–∏—Ç–µ—Ä"]
    ]
    
    let categoryTitles = ["–ö—É—Ö–Ω—è", "–ó–∞–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", "–û—Ç–µ–ª—å","–ú–∞–≥–∞–∑–∏–Ω", "–ö–æ—Ñ–µ–π–Ω—è"]

    init(employee: AppUser) {
        self.employee = employee
        _selectedSpecialty = State(initialValue: employee.specialty) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
    }

    var body: some View {
        VStack {
            Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                .font(.largeTitle)
                .padding()

            Text(employee.email)
                .font(.headline)
                .foregroundColor(.gray)
                .padding(.bottom, 10)

            Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:")
                .font(.subheadline)
                .padding(.bottom, 5)

            List {
                ForEach(categoryTitles, id: \.self) { category in
                    Section(header: Text(category).font(.headline)) {
                        if let positions = specialties[category] {
                            ForEach(positions, id: \.self) { specialty in
                                Button(action: {
                                    selectedSpecialty = specialty
                                }) {
                                    HStack {
                                        Text(specialty)
                                        Spacer()
                                        if selectedSpecialty == specialty {
                                            Image(systemName: "checkmark.circle.fill")
                                                .foregroundColor(.blue)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // üîπ –û–ø—Ü–∏—è "–î—Ä—É–≥–æ–µ"
                Section {
                    Button(action: {
                        selectedSpecialty = "custom"
                    }) {
                        HStack {
                            Text("–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)")
                            Spacer()
                            if selectedSpecialty == "custom" {
                                Image(systemName: "checkmark.circle.fill")
                                    .foregroundColor(.blue)
                            }
                        }
                    }

                    if selectedSpecialty == "custom" {
                        TextField("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", text: $customSpecialty)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .padding(.horizontal)
                    }
                }
            }
            .listStyle(GroupedListStyle())

            Button(action: saveSpecialty) {
                Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            .padding()

            Spacer()
        }
    }

    func saveSpecialty() {
        let db = Firestore.firestore()
        let newSpecialty = selectedSpecialty == "custom" ? customSpecialty : selectedSpecialty

        db.collection("users").document(employee.id).updateData([
            "specialty": newSpecialty
        ]) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: \(error.localizedDescription)")
            } else {
                print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è \(employee.email): \(newSpecialty)")
                presentationMode.wrappedValue.dismiss() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
            }
        }
    }
}
