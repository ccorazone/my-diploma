import SwiftUI
import FirebaseAuth

struct ChatView: View {
    var employee: AppUser
    @State private var messages: [Message] = []
    @State private var textMessage: String = ""

    var body: some View {
        VStack {
            // ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º/email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            VStack {
                Text(employee.email)
                    .font(.headline)
                    .foregroundColor(.white)
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color.blue)
            }
            .clipShape(RoundedRectangle(cornerRadius: 15))
            .shadow(radius: 5)

            // ‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            ScrollView {
                VStack(alignment: .leading, spacing: 10) {
                    ForEach(messages) { message in
                        HStack {
                            if message.senderId == Auth.auth().currentUser?.uid {
                                Spacer()
                                Text(message.text)
                                    .padding()
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(15)
                                    .shadow(radius: 2)
                            } else {
                                Text(message.text)
                                    .padding()
                                    .background(Color.gray.opacity(0.2))
                                    .foregroundColor(.black)
                                    .cornerRadius(15)
                                    .shadow(radius: 2)
                                Spacer()
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }
            .padding(.top, 5)

            // ‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            HStack {
                TextField("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", text: $textMessage)
                    .padding()
                    .background(Color.white)
                    .clipShape(RoundedRectangle(cornerRadius: 10))
                    .shadow(radius: 2)
                
                Button(action: sendMessage) {
                    Image(systemName: "paperplane.fill")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .clipShape(Circle())
                        .shadow(radius: 2)
                }
            }
            .padding()
        }
        .background(Color(UIColor.systemGroupedBackground).edgesIgnoringSafeArea(.all))
        .onAppear {
            guard let currentUserId = Auth.auth().currentUser?.uid else {
                print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            }

            let adminId = currentUserId
            let chatId = ChatService.shared.getChatId(adminId: adminId, employeeId: employee.id)

            print("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ —Å \(employee.email)")
            print("üìå chatId: \(chatId)")

            ChatService.shared.observeMessages(adminId: adminId, employeeId: employee.id) { messages in
                DispatchQueue.main.async {
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(messages.count)")
                    self.messages = messages
                }
            }
        }


    }

    func sendMessage() {
        guard let currentUserId = Auth.auth().currentUser?.uid else {
                print("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            }
            ChatService.shared.sendMessage(adminId: currentUserId, employeeId: employee.id, text: textMessage) { success, error in
                if success {
                    textMessage = "" // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: \(error ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                }
            }
    }
}
    
