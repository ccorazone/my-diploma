import SwiftUI
import Firebase
import FirebaseAuth
import SDWebImageSwiftUI

struct PostCardView: View {
    let post: Post
    let onDelete: () -> Void
    let onEdit: () -> Void
    let onReact: (Post, Bool) -> Void // üëà –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥: –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º
    var isEmployeeMode: Bool = false

    @State private var isLoading: Bool = true
    @State private var localReactions: [String: Int] = [:]
    
    var userId: String? {
        Auth.auth().currentUser?.uid
    }

    var hasReacted: Bool {
        userId != nil && localReactions[userId!] != nil
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // –ö–∞—Ä—Ç–∏–Ω–∫–∞
            ZStack {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if let imageUrl = post.imageUrl, let url = URL(string: imageUrl) {
                    WebImage(url: url)
                        .resizable() // –î–µ–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º—ã–º
                        .onSuccess { _, _, _ in
                            DispatchQueue.main.async {
                                isLoading = false
                            }
                        }
                        .onFailure { _ in
                            DispatchQueue.main.async {
                                isLoading = false
                            }
                        }
                        .indicator(.activity) // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (–∫—Ä—É–∂–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏)
                        .scaledToFill() // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                        .frame(maxWidth: .infinity, maxHeight: 200) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        .clipped() // –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        .cornerRadius(16) // –°–∫—Ä—É–≥–ª—è–µ–º —É–≥–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }
                
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                if isLoading {
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                        .frame(width: 50, height: 50)
                        .background(Color.black.opacity(0.3))
                        .clipShape(Circle())
                }
            }



            // –¢–µ–∫—Å—Ç –∏ –¥–∞—Ç–∞
            Text(post.text)
                .font(.body)
                .foregroundColor(.primary)
            Text(post.timestamp, style: .date)
                .font(.caption)
                .foregroundColor(.secondary)

            // –†–µ–∞–∫—Ü–∏–∏
            HStack {
                Button(action: {
                    guard let uid = userId else { return }

                    var updatedPost = post
                    if hasReacted {
                        updatedPost.reactions.removeValue(forKey: uid)
                        localReactions.removeValue(forKey: uid)
                        onReact(updatedPost, false)
                    } else {
                        updatedPost.reactions[uid] = 1
                        localReactions[uid] = 1
                        onReact(updatedPost, true)
                    }
                }) {
                    Text(hasReacted ? "–£–±—Ä–∞—Ç—å –ª–∞–π–∫" : "–õ–∞–π–∫")
                        .foregroundColor(hasReacted ? .red : .blue)
                }
                .padding(.trailing)

                Text("–õ–∞–π–∫–æ–≤: \(localReactions.values.reduce(0, +))")
                    .font(.subheadline)

                Spacer()

                if !isEmployeeMode {
                    Button(action: onEdit) {
                        Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                            .foregroundColor(.blue)
                    }
                    Spacer()

                    Button(action: onDelete) {
                        Text("–£–¥–∞–ª–∏—Ç—å")
                            .foregroundColor(.red)
                    }
                }
            }
            .padding(.top, 8)
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(16)
        .shadow(color: Color.black.opacity(0.05), radius: 6, x: 0, y: 4)
        .onAppear {
            self.localReactions = post.reactions
        }
    }
}



