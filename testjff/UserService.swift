import Firebase
import FirebaseAuth
import FirebaseFirestore
//import FirebaseFunctions

class UserService {
    static let shared = UserService() // ‚úÖ –°–∏–Ω–≥–ª—Ç–æ–Ω

    static func registerUser(email: String, password: String, role: String, companyId: String, completion: @escaping (Bool, String?) -> Void) {
        let auth = Auth.auth()
        let db = Firestore.firestore()
        

        // ‚úÖ 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Authentication
        auth.createUser(withEmail: email, password: password) { authResult, error in
            if let error = error {
                completion(false, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
                return
            }
            
            guard let userId = authResult?.user.uid else {
                completion(false, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            }
            
            // ‚úÖ 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore (–∫–æ–ª–ª–µ–∫—Ü–∏—è users)
            let userRef = db.collection("users").document(userId)
            let userData: [String: Any] = [
                "email": email,
                "role": role,
                "companyId": companyId,
                "specialty": "none"
            ]
            
            userRef.setData(userData) { error in
                if let error = error {
                    completion(false, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error.localizedDescription)")
                    return
                }
                
                // ‚úÖ 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
                let companyRef = db.collection("companies").document(companyId)
                let field = role == "manager" ? "managers" : "employees"

                print("üî• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é \(companyId), –¥–æ–±–∞–≤–ª—è–µ–º userId: \(userId)")

                db.collection("companies").document(companyId).updateData([
                    field: FieldValue.arrayUnion([userId])
                ]) { error in
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: \(error.localizedDescription)")
                        completion(false, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: \(error.localizedDescription)")
                    } else {
                        print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ \(userId) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏—é \(companyId)!")
                        completion(true, nil)
                    }
                }
                
                
            }
        }
    }
    func fetchCompanyName(companyId: String, completion: @escaping (String?) -> Void) {
        let db = Firestore.firestore()
        
        db.collection("companies").document(companyId).getDocument { document, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: \(error.localizedDescription)")
                completion(nil)
                return
            }
            
            if let document = document, document.exists {
                let companyName = document.data()?["name"] as? String ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: \(companyName)")
                completion(companyName)
            } else {
                print("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                completion(nil)
            }
        }
    }

    static func createUser(email: String, password: String, companyId: String, role: String, completion: @escaping (Error?) -> Void) {
        Auth.auth().createUser(withEmail: email, password: password) { authResult, error in
            if let error = error {
                completion(error)
                return
            }
            
            guard let user = authResult?.user else {
                completion(NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"]))
                return
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
            let db = Firestore.firestore()
            db.collection("users").document(user.uid).setData([
                "email": email,
                "companyId": companyId,
                "role": role,
                "createdAt": FieldValue.serverTimestamp()
            ]) { error in
                completion(error)
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º employeeId
    static func updateShiftsWithEmployeeId(completion: @escaping (Error?) -> Void) {
        let db = Firestore.firestore()
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.collection("users").getDocuments { (snapshot, error) in
            if let error = error {
                completion(error)
                return
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å [–∏–º—è: id]
            var userNameToId: [String: String] = [:]
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for document in snapshot?.documents ?? [] {
                if let name = document.data()["name"] as? String {
                    userNameToId[name] = document.documentID
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã
            db.collection("shifts").getDocuments { (shiftsSnapshot, shiftsError) in
                if let shiftsError = shiftsError {
                    completion(shiftsError)
                    return
                }
                
                // –°–æ–∑–¥–∞–µ–º batch –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                let batch = db.batch()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É
                for shiftDoc in shiftsSnapshot?.documents ?? [] {
                    if let employeeName = shiftDoc.data()["employeeName"] as? String,
                       let userId = userNameToId[employeeName] {
                        // –î–æ–±–∞–≤–ª—è–µ–º employeeId –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                        let shiftRef = db.collection("shifts").document(shiftDoc.documentID)
                        batch.updateData(["employeeId": userId], forDocument: shiftRef)
                    }
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                batch.commit { error in
                    completion(error)
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω: \(error.localizedDescription)")
                    } else {
                        print("‚úÖ –°–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    }
                }
            }
        }
    }
}
