import Firebase
import FirebaseAuth

class ChatService {
    static let shared = ChatService() // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–∑–¥–µ
    private let db = Firestore.firestore()

    /// –ü–æ–ª—É—á–∞–µ–º `chatId` –ø–æ `adminId` –∏ `employeeId`
    func getChatId(adminId: String, employeeId: String) -> String {
        return adminId < employeeId ? "\(adminId)_\(employeeId)" : "\(employeeId)_\(adminId)"
    }

    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    func sendMessage(adminId: String, employeeId: String, text: String, completion: @escaping (Bool, String?) -> Void) {
        guard let currentUserId = Auth.auth().currentUser?.uid else {
            completion(false, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        }

        let chatId = getChatId(adminId: adminId, employeeId: employeeId)
        let chatRef = db.collection("chats").document(chatId)
        let messageRef = chatRef.collection("messages").document()

        let receiverId = (currentUserId == adminId) ? employeeId : adminId

        let messageData: [String: Any] = [
            "senderId": currentUserId,
            "receiverId": receiverId,
            "text": text,
            "timestamp": FieldValue.serverTimestamp()
        ]

        // üîπ –°–æ–∑–¥–∞—ë–º —á–∞—Ç (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        chatRef.setData([
            "lastMessage": text,
            "timestamp": FieldValue.serverTimestamp(),
            "participants": [adminId, employeeId] // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        ], merge: true)

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é `messages`
        messageRef.setData(messageData) { error in
            if let error = error {
                completion(false, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)")
            } else {
                completion(true, nil)
            }
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
    func observeMessages(adminId: String, employeeId: String, completion: @escaping ([Message]) -> Void) {
        let chatId = getChatId(adminId: adminId, employeeId: employeeId)

        print("üëÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ: \(chatId)")

        db.collection("chats").document(chatId).collection("messages")
            .order(by: "timestamp", descending: false)
            .addSnapshotListener { snapshot, error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: \(error.localizedDescription)")
                    return
                }

                guard let documents = snapshot?.documents else {
                    print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ \(chatId)")
                    return
                }

                let messages = documents.compactMap { doc -> Message? in
                    let data = doc.data()
                    return Message(
                        id: doc.documentID,
                        senderId: data["senderId"] as? String ?? "",
                        receiverId: data["receiverId"] as? String ?? "",
                        text: data["text"] as? String ?? "",
                        timestamp: (data["timestamp"] as? Timestamp)?.dateValue() ?? Date()
                    )
                }

                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: \(messages.count)")
                messages.forEach { print("üì© \( $0.text ) –æ—Ç \( $0.senderId )") }

                DispatchQueue.main.async {
                    completion(messages)
                }
            }
    }

}

// –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
struct Message: Identifiable {
    var id: String
    var senderId: String
    var receiverId: String
    var text: String
    var timestamp: Date
}
